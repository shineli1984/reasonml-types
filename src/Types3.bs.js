// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");

function $at$colon(h, t) {
  return /* Cons */[
          h,
          t
        ];
}

var l_001 = /* Cons */[
  2,
  /* Cons */[
    3,
    /* Empty */0
  ]
];

var l = /* Cons */[
  1,
  l_001
];

function $at$neg$less(v, param) {
  return /* Node */[
          v,
          param[0],
          param[1]
        ];
}

var t = $at$neg$less(1, /* tuple */[
      $at$neg$less(2, /* tuple */[
            /* Leaf */0,
            /* Leaf */0
          ]),
      /* Leaf */0
    ]);

function sum(tree, acc) {
  if (tree) {
    return (tree[0] + sum(tree[1], acc) | 0) + sum(tree[2], acc) | 0;
  } else {
    return acc;
  }
}

function fold(f, _i, _t) {
  while(true) {
    var t = _t;
    var i = _i;
    if (t) {
      _t = t[2];
      _i = fold(f, Curry._2(f, i, t[0]), t[1]);
      continue ;
    } else {
      return i;
    }
  };
}

var TreeFoldable = /* module */[/* fold */fold];

var r = fold((function (acc, v) {
        return acc + v | 0;
      }), 0, t);

console.log(r);

exports.$at$colon = $at$colon;
exports.l = l;
exports.$at$neg$less = $at$neg$less;
exports.t = t;
exports.sum = sum;
exports.TreeFoldable = TreeFoldable;
exports.r = r;
/* t Not a pure module */
